// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum
enum ActiveStatusEnum {
  ACTIVE
  INACTIVE
}

enum UserStatusEnum {
  ACTIVE
  INACTIVE
  SUSPEND
}

enum AccessMenuAllowedEnum {
  CREATE
  READ
  UPDATE
  DELETE
  PRINT
  EXPORT
  IMPORT
  APPROVE
}

//! Setting Modul

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  code        String           @unique
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User        User[]
  AccessModul AccessModul[]
  AccessMenu  AccessMenu[]

  @@map("roles")
}

model User {
  id Int @id @default(autoincrement())

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  name     String
  username String         @unique
  email    String?        @unique
  password String
  status   UserStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProjectMember        ProjectMember[]
  ProjectMeetingMember ProjectMeetingMember[]

  @@map("users")
}

model CategoryModul {
  id          Int              @id @default(autoincrement())
  name        String
  code        String           @unique
  prefix      String           @unique
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Modul Modul[]

  @@map("category_moduls")
}

model Modul {
  id Int @id @default(autoincrement())

  categoryModulId Int           @map("category_modul_id")
  CategoryModul   CategoryModul @relation(fields: [categoryModulId], references: [id])

  name        String
  code        String           @unique
  prefix      String           @unique
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Menu        Menu[]
  AccessModul AccessModul[]
  AccessMenu  AccessMenu[]

  @@map("moduls")
}

model Menu {
  id Int @id @default(autoincrement())

  parentMenuId Int?  @map("parent_menu_id")
  ParentMenu   Menu? @relation("ParentMenu", fields: [parentMenuId], references: [id])

  modulId Int   @map("modul_id")
  Modul   Modul @relation(fields: [modulId], references: [id])

  name        String
  code        String           @unique
  prefix      String           @unique
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ChildrenMenu Menu[]       @relation("ParentMenu")
  AccessMenu   AccessMenu[]

  @@map("menus")
}

model AccessModul {
  id String @id @default(uuid())

  roleId Int  @map("role_id")
  Role   Role @relation(fields: [roleId], references: [id])

  modulId Int   @map("modul_id")
  Modul   Modul @relation(fields: [modulId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("access_moduls")
}

model AccessMenu {
  id String @id @default(uuid())

  roleId Int  @map("role_id")
  Role   Role @relation(fields: [roleId], references: [id])

  menuId Int  @map("menu_id")
  Menu   Menu @relation(fields: [menuId], references: [id])

  modulId Int   @map("modul_id")
  Modul   Modul @relation(fields: [modulId], references: [id])

  allowedAccess AccessMenuAllowedEnum[] @map("allowed_access")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("access_menus")
}

model MasterCategory {
  id Int @id @default(autoincrement())

  parentMasterCategoryId Int?            @map("parent_master_category_id")
  ParentMasterCategory   MasterCategory? @relation("ParentMasterCategory", fields: [parentMasterCategoryId], references: [id])

  name        String
  code        String           @unique
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  MasterData             MasterData[]
  ChildrenMasterCategory MasterCategory[] @relation("ParentMasterCategory")

  @@map("master_category")
}

model MasterData {
  id Int @id @default(autoincrement())

  parentMasterDataId Int?        @map("parent_master_data_id")
  ParentMasterData   MasterData? @relation("ParentMasterData", fields: [parentMasterDataId], references: [id])

  masterCategoryId Int            @map("master_category_id")
  MasterCategory   MasterCategory @relation(fields: [masterCategoryId], references: [id])

  masterCategoryCode String           @map("master_category_code")
  name               String
  code               String           @unique
  description        String?
  status             ActiveStatusEnum @default(ACTIVE)
  parameter1_key     String?
  parameter1_value   String?
  parameter2_key     String?
  parameter2_value   String?
  parameter3_key     String?
  parameter3_value   String?
  parameter4_key     String?
  parameter4_value   String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ChildrenMasterData MasterData[] @relation("ParentMasterData")

  @@map("master_data")
}

model Parameter {
  id Int @id @default(autoincrement())

  name        String
  code        String           @unique
  value       String
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("parameters")
}

//! Main Modul

enum DegreeOfDifficultyEnum {
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

enum MeetingMethodEnum {
  ONLINE
  OFFLINE
}

enum ProjectStatusEnum {
  ACTIVE
  INACTIVE
  SUSPEND
  FINISH
}

model Project {
  id Int @id @default(autoincrement())

  clientId      String        @map("client_id")
  ProjectClient ProjectClient @relation(fields: [clientId], references: [id])

  name      String
  code      String            @unique
  startDate DateTime          @map("start_date") @db.Date()
  endDate   DateTime          @map("end_date") @db.Date()
  status    ProjectStatusEnum @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ProjectMember   ProjectMember[]
  ProjectDocument ProjectDocument[]
  ProjectMeeting  ProjectMeeting[]
  ProjectTask     ProjectTask[]

  @@map("projects")
}

model ProjectClient {
  id String @id @default(uuid())

  name        String
  code        String  @unique
  description String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Project Project[]

  @@map("project_clients")
}

model ProjectMember {
  id String @id @default(uuid())

  projectId Int     @map("project_id")
  Project   Project @relation(fields: [projectId], references: [id])

  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id])

  status ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_members")
}

model ProjectDocument {
  id String @id @default(uuid())

  projectId Int     @map("project_id")
  Project   Project @relation(fields: [projectId], references: [id])

  file        String
  name        String
  description String?
  status      ActiveStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_documents")
}

model ProjectMeeting {
  id String @id @default(uuid())

  projectId Int     @map("project_id")
  Project   Project @relation(fields: [projectId], references: [id])

  name        String
  description String?
  startDate   DateTime          @map("start_date") @db.Date()
  endDate     DateTime          @map("end_date") @db.Date()
  method      MeetingMethodEnum @default(ONLINE)
  link        String
  status      ActiveStatusEnum  @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProjectMeetingMember ProjectMeetingMember[]

  @@map("project_meetings")
}

model ProjectMeetingMember {
  id String @id @default(uuid())

  projectMeetingId String         @map("project_meeting_id")
  ProjectMeeting   ProjectMeeting @relation(fields: [projectMeetingId], references: [id])

  userId Int  @map("user_id")
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_meeting_members")
}

model ProjectTask {
  id String @id @default(uuid())

  projectId Int     @map("project_id")
  Project   Project @relation(fields: [projectId], references: [id])

  name               String
  description        String?
  startDate          DateTime               @map("start_date")
  endDate            DateTime               @map("end_date")
  degreeOfDifficulty DegreeOfDifficultyEnum @default(EASY) @map("degree_of_difficulty")
  status             ActiveStatusEnum       @default(ACTIVE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_tasks")
}
